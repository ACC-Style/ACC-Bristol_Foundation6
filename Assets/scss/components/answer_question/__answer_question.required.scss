.inline-group{
	list-style: none;
	display:block;
	&>*{
		display: inline-block;
		list-style: none;
		}
	&:after{
		content:'';
		display:block;
		clear:both;
	}
}
.answer,.answer-group,.question,.question-group{
	input[type="text"],
	input[type="password"],
	input[type="date"],
	input[type="datetime"],
	input[type="datetime-local"],
	input[type="month"],
	input[type="week"],
	input[type="email"],
	input[type="number"],
	input[type="search"],
	input[type="tel"],
	input[type="time"],
	input[type="url"],
	input[type="color"],
	textarea,
	select,
	button,
	.button{margin-bottom: 0;}
}
.answer,.question{
	margin-bottom: .5rem;
	.data,.error,.warning,.alert,.validated, .required{display:none;}
	@include match-display(".required");
	
	.unit{
		@include grid-row();
		@include prefix-postfix-base();
		@extend %h6;
		color:grey(50);
		border-color:grey(0);
		text-align: left;
		padding-left: .5rem;
		line-height: 1;
	}
}
.label-holder,.input-holder,.message-holder,.value-holder{
	@include grid-row(collapse);
}
.label-holder{
	label, .label{@include font-slab-bold();}
	@include baseline-font(0,.5,.25);
	
	position: relative;
	background-color:transparent;
	color:fontcolor($black);
	white-space: nowrap;
	@include bp(sm){
		white-space:normal;
	}
	.text{padding-right:1rem; line-height: 1.2em;}
	.error &{color:fontcolor($warning-color);}
	.warning &{color:fontcolor($alert-color);}
}


.required-holder {
	display: none;
	height: 1rem;
	width:1rem;
	position: relative;
	margin-left:-1rem;
	margin-right:-1rem;
	color:grey(80);
	i.fa-holder-dynamic{ position: absolute;top:0;left:0;font-size: .75rem;}
}

%visible-required-icon{
	background-color: transparent;
	display: inline-block;
}
.answer.required .required-holder,.question.required .required-holder{
	@extend %visible-required-icon;
	@include fa-holder($fa-var-asterisk,'dynamic');
	color:$alert-color;
}

.input-holder,.value-holder{
	@include grid-row();
	margin-bottom: .75rem;
	>.input-space{  padding-left: 0;

	}
}
[class*="input-space"] + [class*="input-space"]:last-child,[class*="value-space"] + [class*="value-space"]:last-child{
	padding-right:0;
}
.answer,.question{.value{
padding: 7px;
vertical-align: top;
display: inline-block;
margin-top: 0;
color:grey(60);
font-size: 1.28571em;
line-height: 1.16667em;
}}
.message-holder{
	small, span{
		@extend %h6;
		display: none;
		padding: .375rem .5625rem .5625rem;
		margin-top: -1px;
		margin-bottom: 1rem;
		background: #d07600;
		clear:both;
		color: #FFF;
		i{margin-right: .5rem;}
	}	
}
.hint{
	@extend .row;
	margin-top: -.75rem;
	font-size: .75rem;
	line-height: 1rem;
	@extend %italic;
}

// State Modifications
// This code is just for dependency this is to help maintain the project but doesn't produce any css.
$required-SCSS_states: "false" !default;
$required_data:(
	'bool' :$required-SCSS_states,
	'required':'__states.required.scss',
	'path':'scss/base/__states.required.scss',
	'file':'_answer_quesiton.required.scss'
	);
@include required-check($required_data...);


// End of required check

.answer,.question{
	@each $State in $states{
		@include match-display( map-get($State, "Selector") );
	}
}
.required-holder {
	@each $State in $states{
		$selector:map-get($State,"Selector");
		.answer#{$selector} &,.question#{$selector} &{
			@extend %visible-required-icon;
			color:fontcolor(map-get($State, 'Color'));
		}

	}
}
.message-holder{
	@each $State in $states{
		$selector:map-get($State,"Selector");
		$color: map-get($State, 'Color');
		small#{$selector},.span#{$selector}{
			background-color: $color;
			color:color-contrast($color);
		}
	}
}